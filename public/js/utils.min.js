class DynamicScript{constructor(url,onload){const script=document.createElement("script");script.onload=onload,script.src=url,script.async=!0,document.head.appendChild(script)}}const cookies={set:function(key,value,{expires:expires,path:path,json:json}={}){let expTime=0;if(expires){"object"==typeof expires?(expTime+=1e3*expires.seconds||0,expTime+=1e3*expires.minutes*60||0,expTime+=1e3*expires.hours*60*60||0,expTime+=1e3*expires.days*60*60*24||0):expTime=expires;const now=new Date;expTime=now.setTime(now.getTime()+expTime)}path||(path="/"),json&&(value=JSON.stringify(value)),expTime=expTime>0?`;expires=${new Date(expTime).toUTCString()}`:"";const cookieString=`${key}=${value}${expTime};path=${path}`;return document.cookie=cookieString,cookieString},get:function(key,json){const cookies=document.cookie.split(";").map(e=>e.trim()),match=cookies.filter(e=>e.split("=")[0]==key);let value=!!match.length&&match[0].split("=")[1];return value&&json&&(value=JSON.parse(value)),value},delete:function(key){const cookies=document.cookie.split(";").map(e=>e.trim()),match=cookies.filter(e=>e.split("=")[0]==key);return document.cookie=`${key}=0;expires=${(new Date).toUTCString()}`,match.length>0},refresh:function(key,{expires:expires,path:path}={}){if(this.get(key)){const optArgs={path:"/"};return expires&&(optArgs.expires=expires),path&&(optArgs.path=path),this.set(key,this.get(key),optArgs)}return!1}},theme={options:["dark","light"],icons:{dark:"sun",light:"moon"},choice:"dark",particles:!0,set:function(name){if(this.options.includes(name)){const oldName=this.choice;document.body.classList.remove(this.choice),document.body.classList.add(name),this.choice=name,cookies.set("theme",name,{expires:{days:365}}),document.querySelector("header #theme").innerHTML=`<i class="fas fa-${this.icons[name]}"></i>`,oldName!=name&&"undefined"!=typeof tsParticles&&this.particles&&tsParticles.loadJSON("frame",`config/particles-${name}.json`),this.onChange&&this.onChange()}},load:function(){this.set(cookies.get("theme")||this.choice),this.particles="false"!=cookies.get("particles"),this.particles&&window.outerWidth<600&&(this.particles=!1),cookies.set("particles",this.particles,{expires:{days:365}}),"true"==cookies.get("particles")?new DynamicScript("https://cdn.jsdelivr.net/npm/tsparticles@1.9.2/dist/tsparticles.min.js",()=>tsParticles.loadJSON("frame",`config/particles-${this.choice}.json`)):document.querySelector("canvas.tsparticles-canvas-el")&&document.querySelector("canvas.tsparticles-canvas-el").remove()},toggle:function(){const index=this.options.indexOf(this.choice),next=this.options[(index+1)%this.options.length];this.set(next)},get:function(){return this.choice}},wallet={address:"0xA6E126a5bA7aE209A92b16fcf464E502f27fb658",loadImg:async function(elem,network){return new Promise(resolve=>{this.img=new Image;const url="https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=";this.shortAddress=`${this.address.slice(0,6)}...${this.address.slice(-4)}`,elem.querySelector("#wallet").innerHTML=`<span class="long">${this.address}</span><span class="short">${this.shortAddress}</span>`,this.img.src=`${url}${this.address}`,this.img.onload=()=>{elem.classList.remove("disabled"),elem.addEventListener("click",()=>this.showModal(network)),resolve(this.img)}})},bindModal:function(elem,network){elem.addEventListener("click",()=>this.showModal(network))},showModal:function(network){const fog=document.createElement("div");fog.id="fog",fog.innerHTML=`<div id="donate-window" class="${network.symbol}">\n            <div id="title">\n                <span>${network.longName?`${network.longName} (${network.name})`:network.name}</span>\n                <span class="big">${network.token} Wallet</span>\n            </div>\n            <div id="qr"><img src="${this.img.src}" alt="qr code"></div>\n            <div id="colored">\n                <div id="wallet-container">\n                    <div id="wallet">${this.shortAddress}</div>\n                    <div id="copy"><i class="far fa-copy"></i></div>\n                </div>\n            </div>\n        </div>`,fog.addEventListener("click",()=>fog.remove()),fog.querySelector("div").addEventListener("click",e=>e.stopPropagation()),fog.querySelector("#wallet-container").addEventListener("click",()=>this.copyAddress()),document.body.appendChild(fog),fadeIn(fog,500)},copyAddress:function(){const elem=document.querySelector("#fog #wallet"),oldText=elem.innerHTML;elem.innerHTML="COPIED";const container=document.querySelector("#fog #wallet-container");container.classList.add("copy"),setTimeout(()=>{elem.innerHTML=oldText,container.classList.remove("copy")},500),navigator.clipboard.writeText(this.address)}};async function fadeIn(elem,time=300){return new Promise(resolve=>{const oldStyle=elem.getAttribute("style");elem.style.transition=`${time/1e3}s opacity`,elem.style.opacity="0",setTimeout(()=>elem.style.opacity="1",1),setTimeout(()=>{elem.removeAttribute("style"),elem.style=oldStyle,resolve(!0)},time+100)})}async function fadeOut(elem,time=300){return new Promise(resolve=>{elem.style.transition=`${time/1e3}s opacity`,setTimeout(()=>elem.style.opacity="0",1),setTimeout(()=>{elem.remove(),resolve(!0)},time+100)})}const price={current:0,element:document.querySelector("#price"),token:"ETH",get:async function(){const data=await(await fetch(`/tokenprice/${this.token}`)).json(),[price,price24h]=[data.price,data.change24h];return{now:parseFloat(price).toFixed(2),changePercent:parseFloat(price24h).toFixed(2)}},update:async function(){this.current=await this.get(),this.current.changePercent<0?(this.element.querySelector("#color").classList.remove("green"),this.element.querySelector("#color").classList.add("red")):(this.element.querySelector("#color").classList.remove("red"),this.element.querySelector("#color").classList.add("green"),this.current.changePercent=`+${this.current.changePercent}`),this.element.querySelector("#now").innerHTML=this.current.now,this.element.querySelector("#before").innerHTML=this.current.changePercent}},network={list:{eth:{symbol:"eth",name:"Ethereum",token:"ETH",id:1,explorer:{icon:"https://etherscan.io/images/favicon3.ico",href:"https://etherscan.io",name:"Etherscan",apiAvailable:!0},rpc:"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161"},bsc:{symbol:"bsc",name:"BSC",longName:"BNB Chain",token:"BNB",id:56,explorer:{icon:"https://bscscan.com/images/favicon.ico",href:"https://bscscan.com",name:"BscScan",apiAvailable:!0},rpc:"https://bsc-dataseed.binance.org/"},avax:{symbol:"avax",name:"Avalanche",token:"AVAX",id:43114,explorer:{icon:"https://snowtrace.io/images/favicon.ico",href:"https://snowtrace.io",name:"SnowTrace",apiAvailable:!0},rpc:"https://api.avax.network/ext/bc/C/rpc"},ftm:{symbol:"ftm",name:"Fantom",token:"FTM",id:250,explorer:{icon:"https://ftmscan.com/images/favicon.png",href:"https://ftmscan.com",name:"FtmScan",apiAvailable:!0},rpc:"https://rpc.ftm.tools/"},poly:{symbol:"poly",name:"Polygon",token:"MATIC",id:137,explorer:{icon:"https://polygonscan.com/images/favicon.ico",href:"https://polygonscan.com",name:"PolygonScan",apiAvailable:!0},rpc:"https://polygon-rpc.com"},cro:{symbol:"cro",name:"Cronos",token:"CRO",id:25,explorer:{icon:"https://cronoscan.com/images/favicon.ico",href:"https://cronoscan.com/",name:"Cronoscan",apiAvailable:!0},rpc:"https://evm-cronos.crypto.org"},one:{symbol:"one",name:"Harmony",longName:"Harmony One",token:"ONE",id:16666e4,explorer:{icon:"https://explorer.harmony.one/favicon.ico",href:"https://explorer.harmony.one",name:"Harmony Explorer",apiAvailable:!1},rpc:"https://api.s0.t.hmny.io/"},celo:{symbol:"celo",name:"Celo",token:"CELO",id:42220,explorer:{icon:"https://avatars.githubusercontent.com/u/37552875?s=200&v=4",href:"https://explorer.celo.org",name:"Celo Explorer",apiAvailable:!1},rpc:"https://forno.celo.org"},ht:{symbol:"ht",name:"Heco",token:"HT",id:128,explorer:{icon:"https://hecoinfo.com/favicon.ico",href:"https://hecoinfo.com",name:"HecoInfo",apiAvailable:!1},rpc:"https://http-mainnet.hecochain.com"},movr:{symbol:"movr",name:"Moonriver",token:"MOVR",id:1285,explorer:{icon:"https://moonriver.moonscan.io/images/favicon.ico",href:"https://moonriver.moonscan.io/",name:"MoonScan",apiAvailable:!0},rpc:"https://rpc.moonriver.moonbeam.network"},fuse:{symbol:"fuse",name:"Fuse",token:"FUSE",id:122,explorer:{icon:"https://explorer.fuse.io/images/favicon-543fd97558f89019d8ee94144a7e46c7.ico?vsn=d",href:"https://explorer.fuse.io/",name:"Fuse Explorer",apiAvailable:!1},rpc:"https://rpc.fuse.io"}},get:function(name){return name||(name=cookies.get("network")||"eth"),this.list[name]},getById:function(id){return Object.values(this.list).find(e=>e.id==id)},set:function(name){cookies.set("network",name,{expires:{days:365}})},getList:function(){return this.list}},api={regex:{url:new RegExp(/^(?:https?:\/\/)?(?:www\.)?([a-z0-9._-]{1,256}\.[a-z0-9]{1,10})\b.*$/),apiKey:new RegExp(/^[a-f0-9]{32}$/)},createEditApiContent:function(){const tabsContent=this.tabsContent;tabsContent.edit.innerHTML='<h2>Edit API key</h2>\n        <p class="title">API Key</p>\n        <input type="text" class="input-text keys" id="key" placeholder="00000000000000000000000000000000">\n        <span id="key-tip" class="tip"></span>\n        <p class="title">API Secret</p>\n        <input type="text" class="input-text keys" id="secret" placeholder="00000000000000000000000000000000">\n        <span id="secret-tip" class="tip"></span>\n        <p class="title origin">Origin <i class="far fa-question-circle"></i></p>\n        <input type="text" class="input-text" id="origin" placeholder="mywebsite.com">\n        <span id="origin-tip" class="tip"></span>\n        <p class="title note">Note <i class="far fa-question-circle"></i></p>\n        <input type="text" class="input-text" id="note" placeholder="My personal note for this key">\n        <div id="checkbox-container">\n            <label>\n                <input type="checkbox">\n                <span>\n                    <div>I want to reset my API key hash</div>\n                    <div class=\'tip hidden\'>WARNING: The current API key hash will not be usable anymore.</div>\n                </span>\n            </label>\n        </div>\n        <div id="button-container"><button id="edit-key">Save</button></div>';const urlRegex=this.regex.url,apiKeyRegex=this.regex.apiKey;tabsContent.edit.querySelector("#origin").addEventListener("keyup",(function(){const value=this.value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1){const tip=tabsContent.edit.querySelector("#origin-tip");tip.innerHTML="",tabsContent.edit.querySelector("#origin").classList.remove("red")}})),tabsContent.edit.querySelectorAll("#key, #secret").forEach(e=>e.addEventListener("keyup",(function(){const value=this.value.trim().toLowerCase();if(value.match(apiKeyRegex)){const tip=tabsContent.edit.querySelector(`#${this.id}-tip`);tip.innerHTML="",this.classList.remove("red")}}))),tabsContent.edit.querySelector("#checkbox-container input").addEventListener("change",(function(){const tip=this.parentNode.querySelector(".tip");this.checked?tip.classList.remove("hidden"):tip.classList.add("hidden")})),tabsContent.edit.querySelector("#edit-key").addEventListener("click",(async function(){const body={};let error=!1;if(tabsContent.edit.querySelector("#origin").value.length){const value=tabsContent.edit.querySelector("#origin").value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1)body.origin=value;else{const tip=tabsContent.edit.querySelector("#origin-tip");tip.innerHTML="Invalid domain",tabsContent.edit.querySelector("#origin").classList.add("red"),error=!0}}tabsContent.edit.querySelector("#note").value.length&&(body.note=tabsContent.edit.querySelector("#note").value.trim());const key=tabsContent.edit.querySelector("#key").value.trim().toLowerCase();if(!key.match(apiKeyRegex)){const tip=tabsContent.edit.querySelector("#key-tip");tip.innerHTML="Invalid API key",tabsContent.edit.querySelector("#key").classList.add("red"),error=!0}if(body.secret=tabsContent.edit.querySelector("#secret").value.trim().toLowerCase(),!body.secret.match(apiKeyRegex)){const tip=tabsContent.edit.querySelector("#secret-tip");tip.innerHTML="Invalid API secret",tabsContent.edit.querySelector("#secret").classList.add("red"),error=!0}const reset=tabsContent.edit.querySelector("#checkbox-container input").checked;if(reset&&(body.resetKey=!0),!error){this.setAttribute("disabled",!0),this.innerHTML='<i class="fas fa-spin fa-cog"></i>';const data=await api.editKey(key,body);api.showWindowEdit(data)}}))},showProfile:function(tabSelected){const fog=document.createElement("div");fog.id="fog";const container=document.createElement("div");container.innerHTML='<div id=\'api-window\' class="modal profile">\n            <div id=\'tab-container\'>\n                <div class="tab" id="create"><i class="fas fa-square-plus"></i><span class="text">New API Key</span></div>\n                <div class="tab disabled" id="info"><i class="fas fa-key"></i><span class="text">Key Info</span></div>\n                <div class="tab disabled" id="recharge"><i class="fa-solid fa-bolt"></i><span class="text">Recharge Key</span></div>\n                <div class="tab disabled" id="history"><i class="fa-solid fa-file-invoice-dollar"></i></i><span class="text">My recharges</span></div>\n                <div class="tab disabled" id="logs"><i class="fa-solid fa-file-lines"></i><span class="text">Usage logs</span></div>\n                <div class="tab disabled" id="logout"><i class="fa-solid fa-right-from-bracket"></i><span class="text">Logout</span></div>\n            </div>\n            <div id="content" class="empty"><i class="fa-solid fa-gear fa-spin"></i></div>\n        </div>',this.isLogged()&&container.querySelectorAll(".tab.disabled").forEach(e=>e.classList.remove("disabled")),container.querySelectorAll(".tab").forEach(e=>e.addEventListener("click",async()=>{if(e.classList.contains("disabled"))return fog.remove(),void await profile.loginModal(tabSelected);profile.show(e.id)})),profile.window=container.querySelector("div"),fog.appendChild(profile.window),fog.addEventListener("click",()=>fog.remove()),fog.querySelector("div").addEventListener("click",e=>e.stopPropagation()),document.body.appendChild(fog),fadeIn(fog,500),fog.querySelector(`#tab-container #${tabSelected||"info"}`).click()},createKey:async function(body){return await this.request("/keys",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)})},editKey:async function(key,body){return await this.request(`/keys/${key}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)})},getKey:async function(key){return await this.request(`/keys/${key}`,{method:"GET",headers:{"Content-Type":"application/json"}})},updateCredit:async function({apiKey:apiKey,transactionHash:transactionHash=!1}){return await this.request(`/credit/${apiKey}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({transactionHash:transactionHash,network:network.get().symbol})})},getCredit:async function(key){return await this.request(`/credit/${key}`,{method:"GET",headers:{"Content-Type":"application/json"}})},getLogs:async function(key,fromTime,toTime){const options={};return fromTime&&(options.fromtime=fromTime),toTime&&(options.totime=toTime),await this.request(`/logs/${key}?${new URLSearchParams(options).toString()}`,{method:"GET",headers:{"Content-Type":"application/json"}})},copyText:function(parent){const input=parent.querySelector("input"),oldText=input.value;input.value="COPIED",setTimeout(()=>input.value=oldText,500),navigator.clipboard.writeText(oldText)},request:async function(endpoint,options){try{const data=await(await fetch(endpoint,options)).json();return data.error&&console.log(data),data}catch(error){return console.log(error),error}},login:async function(){const glyph=document.querySelector("#search #api-info i");glyph.classList.remove("fa-right-to-bracket","fa-key"),glyph.classList.add("fa-spin","fa-cog");const input=document.querySelector("#search input");input.setAttribute("readonly",!0);const key=api.isLogged()||input.value.trim().toLowerCase();let keyInfo=!1;return key.match(api.regex.apiKey)&&(keyInfo=await api.getKey(key),keyInfo.apiKey&&(cookies.set("apikey-login",keyInfo.apiKey,{expires:{days:30}}),glyph.classList.add("fa-key"),document.querySelector("#search").classList.add("logged"),input.value=`${key.slice(0,7)}...${key.slice(-7)}`)),glyph.classList.remove("fa-spin","fa-cog"),keyInfo||(glyph.classList.add("fa-right-to-bracket"),input.removeAttribute("readonly"),input.value=""),keyInfo},logout:function(){if(api.isLogged()){cookies.delete("apikey-login"),document.querySelector("#search").classList.remove("logged");const input=document.querySelector("#search input");input.value="",input.removeAttribute("readonly");const glyph=document.querySelector("#search #api-info i");glyph.classList.remove("fa-key"),glyph.classList.add("fa-right-to-bracket"),new Toast("👋 You have logged out",{timeOut:5e3})}},isLogged:function(){return cookies.get("apikey-login")||!1}},profile={content:{},loginModal:async function(redirect){const fog=document.createElement("div");fog.id="fog";const content=document.createElement("div");fog.innerHTML='<div class="modal"><div id="content">\n            <h2>API key Login</h2>\n            <p class="title">API key</p>\n            <input type="text" class="input-text keys" id="key" placeholder="00000000000000000000000000000000">\n            <span id="key-tip" class="tip"></span>\n            <div id="button-container"><button id="get-key">Search</button></div>\n        </div></div>',fog.querySelector("#key").addEventListener("keyup",(function(){const value=this.value.trim().toLowerCase();if(value.match(apiKeyRegex)){const tip=fog.querySelector("#key-tip");tip.innerHTML="",this.classList.remove("red")}}));const apiKeyRegex=api.regex.apiKey;fog.querySelector("#get-key").addEventListener("click",(async function(){let error=!1;const key=fog.querySelector("#key").value.trim().toLowerCase();if(!key.match(apiKeyRegex)){const tip=fog.querySelector("#key-tip");tip.innerHTML="Invalid API key",fog.querySelector("#key").classList.add("red"),error=!0}if(!error){this.setAttribute("disabled",!0),this.innerHTML='<i class="fas fa-spin fa-cog"></i>';const data=await api.getKey(key);fog.remove(),document.querySelector("#search input").value=data.apiKey,await api.login(),api.showProfile(redirect)}})),fog.addEventListener("click",()=>fog.remove()),fog.querySelector("div").addEventListener("click",e=>e.stopPropagation()),document.body.appendChild(fog),fadeIn(fog,500)},show:async function(id){const elem=document.querySelector(`#fog #${id}.tab`);profile.locked||elem.classList.contains("disabled")||(this.locked=!0,document.querySelectorAll("#fog .tab").forEach(e=>e.classList.remove("active")),elem.classList.add("active"),this.content[id]||(this.content[id]=document.createElement("div"),this.content[id].id="content",this.content[id].classList.add("empty"),this.content[id].innerHTML='<i class="fa-solid fa-gear fa-spin"></i>'),this.window.querySelector("#content").replaceWith(this.content[id]),await this.createContent(id),this.bindContent(id),this.window.querySelector("#content").replaceWith(this.content[id]),this.locked=!1)},createContent:async function(id){const contentFunctions={info:async()=>{const data=await api.getKey(api.isLogged());return console.log(data),data.apiKey?`<h2>API key information</h2><div id="content-container">\n                    <p class="label">API Key</p>\n                    <div class="input-container">\n                        <input type="text" class="input-text keys" id="input-apiKey" readonly value="${data.apiKey}">\n                        <div id="reset-key" class="input-button" title="Reset key"><i class="fas fa-sync-alt"></i></div>\n                    </div>\n                    \n                    <p class="label">Creation</p>\n                    <div class="input-container">\n                        <input type="text" class="input-text keys" id="input-creation" readonly value="${new Date(data.creation).toISOString().replace("T"," ").split(".")[0]}">\n                    </div>\n    \n                    <p class="label">Credit</p>\n                    <div class="input-container">\n                        <input type="text" class="input-text keys" id="input-credit" readonly value="$${parseFloat(data.credit).toFixed(6)}">\n                        <div id="recharge-key" class="input-button" title="Recharge key"><i class="fa-solid fa-bolt"></i></div>\n                    </div>\n    \n                    <p class="label">Origin</p>\n                    <div class="input-container">\n                        <input type="text" class="input-text keys" id="input-origin" readonly value="${data.origin||""}">\n                        <div id="edit-origin" class="input-button" title="Edit"><i class="fa-solid fa-pen-to-square"></i></div>\n                    </div>\n    \n                    <p class="label">Note</p>\n                    <div class="input-container">\n                        <input type="text" class="input-text keys" id="input-note" readonly value="${data.note||""}">\n                        <div id="edit-note" class="input-button" title="Edit"><i class="fa-solid fa-pen-to-square"></i></div>\n                    </div>\n                </div>`:(new Toast(`☹️ ${data.error}: ${data.message}`),"")},create:async()=>'<h2>New API key</h2>\n                    <p class="label origin">Origin</p>\n                    <input type="text" class="input-text" id="origin" placeholder="mywebsite.com">\n                    <span id="origin-tip" class="tip"></span>\n                    <p class="label note">Note</p>\n                    <input type="text" class="input-text" id="note" placeholder="My personal note for this key">\n                    <div id="checkbox-container">\n                        <label>\n                            <input type="checkbox">\n                            <span>I agree to not share any of my API key information with others.</span>\n                        </label>\n                        <label>\n                            <input type="checkbox">\n                            <span>I am aware that front-end code is publicly readable and exposing my API key on it is the same as sharing them.</span>\n                        </label>\n                    </div>\n                    <div id="button-container"><button id="create-key" disabled>Create API key</button></div>\n                ',recharge:async()=>this.content[id].querySelector(".fa-gear")?'<h2>API key credit recharge</h2>\n                    <p>Connect your wallet to recharge your API key</p>\n                    <div id="button-container" class="vertical"></div>':this.content[id].innerHTML,history:async()=>{const modal=document.querySelector("#fog #api-window");modal.classList.add("large");const key=api.isLogged(),data=await api.getCredit(key);let txs='<div class="empty">No transactions found. Try recharging your API key.</div>';if(data.results.length>0){const tds=data.results.map(e=>{const thisNetwork=network.getList()[e.network];return`<div class="row col-6">\n                            <div class="cell"><a href="${thisNetwork.explorer.href}/tx/${e.tx}" target="_blank" rel="noopener nofollow">${e.tx.slice(0,6)}...${e.tx.slice(-4)}</a></div>\n                            <div class="cell">${new Date(e.timestamp).toISOString().replace("T"," ").split(".")[0]}</div>\n                            <div class="cell">${thisNetwork.name}</div>\n                            <div class="cell"><a href="${thisNetwork.explorer.href}/address/${e.fromWallet}" target="_blank" rel="noopener nofollow">${e.fromWallet.slice(0,6)}...${e.fromWallet.slice(-4)}</a></div>\n                            <div class="cell">${parseFloat(e.price).toFixed(4)}</div>\n                            <div class="cell">${(1e-9*parseInt(e.value)).toFixed(6)}</div>\n                        </div>`}).join("");txs=`<div class="row head col-6">\n                        <div class="cell">Tx</div>\n                        <div class="cell">Time</div>\n                        <div class="cell">Network</div>\n                        <div class="cell">From wallet</div>\n                        <div class="cell">Token Price</div>\n                        <div class="cell">Value</div>\n                    </div>\n                    <div class="body">${tds}</div>`}return txs=`<div class="table">${txs}</div>`,`<h2>API recharge history</h2>\n                    <p id="key-show">${key}</p>\n                    ${txs}\n                    <p id="missing">Missing tx? <a href="https://t.me/owlracle" target="_blank" rel="noopener">contact us</a>!</p>\n                `},logs:async()=>{const key=api.isLogged(),txs='<div class="table"><div class="empty">No requests found. Try to adjust the time range of your search.</div></div>';this.fromTime||(this.fromTime=parseInt(new Date((new Date).getTime()-36e5).getTime()/1e3)),this.toTime||(this.toTime=parseInt((new Date).getTime()/1e3));const now=new Date(1e3*this.toTime).toISOString().slice(0,16),ago=new Date(1e3*this.fromTime).toISOString().slice(0,16),modal=document.querySelector("#fog #api-window");modal.classList.add("large");let previousTable=this.content[id].querySelector("#table-container");return previousTable&&(previousTable=previousTable.innerHTML),`<div class="title">\n                    <div class="col">\n                        <h2>API request history</h2>\n                        <p id="key-show">${key}</p>\n                    </div>                \n                    <div class="col right">\n                        <label>\n                            <span>From:</span>\n                            <input id="from-time" type="datetime-local" class="input-text time-range" value="${ago}">\n                        </label>\n                        <label>\n                            <span>To:</span>\n                            <input id="to-time" type="datetime-local" class="input-text time-range" value="${now}">\n                        </label>\n                    </div>    \n                </div>\n                <div id="table-container">${previousTable||txs}</div>`}},modal=document.querySelector("#fog #api-window");modal.classList.remove("large");const container=document.createElement("div");return container.id="content",container.innerHTML=contentFunctions[id]?await contentFunctions[id]():"",this.content[id]=container,container},bindContent:function(id){const bindFunctions={info:()=>{const content=this.content[id];content.querySelector("#recharge-key").addEventListener("click",()=>{profile.show("recharge")});const editOrigin=content.querySelector("#edit-origin"),input=content.querySelector("#input-origin"),glyph=editOrigin.querySelector("i");editOrigin.addEventListener("click",()=>{editOrigin.classList.contains("green")?(glyph.classList.add("fa-pen-to-square"),glyph.classList.remove("fa-check"),editOrigin.classList.remove("green"),console.log(input.value)):(glyph.classList.remove("fa-pen-to-square"),glyph.classList.add("fa-check"),editOrigin.classList.add("green"),input.removeAttribute("readonly"),input.focus())})},create:()=>{const content=this.content[id];content.querySelectorAll("#checkbox-container input").forEach(e=>e.addEventListener("click",()=>{const checkboxes=content.querySelectorAll("#checkbox-container input");checkboxes[0].checked&&checkboxes[1].checked?content.querySelector("#create-key").removeAttribute("disabled"):content.querySelector("#create-key").setAttribute("disabled",!0)}));const urlRegex=api.regex.url;content.querySelector("#origin").addEventListener("keyup",()=>{const value=content.querySelector("#origin").value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1){const tip=content.querySelector("#origin-tip");tip.innerHTML="",content.querySelector("#origin").classList.remove("red")}}),content.querySelector("#create-key").addEventListener("click",(async function(){const body={};let error=!1;if(content.querySelector("#origin").value.length){const value=content.querySelector("#origin").value.trim().toLowerCase(),match=value.match(urlRegex);if(match&&match.length>1)body.origin=value;else{const tip=content.querySelector("#origin-tip");tip.innerHTML="Invalid domain",content.querySelector("#origin").classList.add("red"),error=!0}}if(content.querySelector("#note").value.length&&(body.note=content.querySelector("#note").value.trim()),!error){this.setAttribute("disabled",!0),this.innerHTML='<i class="fa-solid fa-gear fa-spin"></i>',body.grc=await recaptcha.getToken();const data=await api.createKey(body);api.showWindowCreate(data)}}))},recharge:()=>{const content=this.content[id];let updatingUI=!1;const checkWalletConnection=async()=>{if(updatingUI)return;if(updatingUI=!0,!this.web3||!this.web3.injected){content.innerHTML='<h2>API key credit recharge</h2>\n                        <p>You must get Metamask to connect to your wallet</p>\n                        <div id="button-container" class="vertical"><button>Get Metamask</button></div>';const button=content.querySelector("button");return button.addEventListener("click",()=>{window.open("https://metamask.io/"),document.querySelector("#fog").click()}),void(updatingUI=!1)}if(!this.web3.connected){content.innerHTML='<h2>API key credit recharge</h2>\n                        <p>Connect your wallet to recharge your API key</p>\n                        <div id="button-container" class="vertical"><button>Connect</button></div>';const button=content.querySelector("button");return button.addEventListener("click",async()=>{await this.web3.connect()}),void(updatingUI=!1)}const connectedNetwork=network.getById(await this.web3.getNetworkId());if(!connectedNetwork){content.innerHTML=`<h2>API key credit recharge</h2>\n                        <p>Network not supported</p>\n                        <div id="button-container" class="vertical"><button><img src="img/${network.get().symbol}.png">Switch to ${network.get().name} network</button></div>`;const button=content.querySelector("button");return button.addEventListener("click",async()=>{await this.web3.switchNetwork(network.get())}),void(updatingUI=!1)}if(connectedNetwork.id!=network.get().id){content.innerHTML=`<h2>API key credit recharge</h2>\n                        <p>Wrong network</p>\n                        <div id="button-container" class="vertical">\n                            <button id="switch"><img src="img/${network.get().symbol}.png">Switch to ${network.get().name} network</button>\n                            <a href="/${connectedNetwork.symbol}"><button><img src="img/${connectedNetwork.symbol}.png">Go to ${connectedNetwork.name} app</button></a>\n                        </div>`;const button=content.querySelector("#switch");return button.addEventListener("click",async()=>{await this.web3.switchNetwork(network.get())}),void(updatingUI=!1)}const account=await this.web3.getAccount(),accountSliced=`${account.slice(0,6)}...${account.slice(-4)}`;content.innerHTML=`<h2>API key credit recharge</h2>\n                    <p class="title">Connected Wallet</p>\n                    <div class="input-container">\n                        <input type="text" class="input-text keys" id="wallet" readonly value="${accountSliced}">\n                        <div class="input-button">\n                            <span id="network-icon"><img src='img/${network.get().symbol}.png'></span>\n                        </div>\n                    </div>\n                    <p class="title">API key</p>\n                    <input type="text" class="input-text keys" id="key" readonly value="${api.isLogged()}">\n                    <p class="title">Recharge amount</p>\n                    <div class="input-container">\n                        <input type="text" class="input-text keys" id="amount" placeholder="0.0000">\n                        <div id="token" class="input-button">\n                            <span class="token-name">${network.get().token}</span>\n                        </div>\n                    </div>\n                    <p class="title" id="values">\n                        <span id="usd">~$0.00</span>\n                        <span>Balance: <span id="balance">0.0000</span><span class="token-name">${network.get().token}</span></span>\n                    </p>\n                    <div id="gasprice">\n                        <div id="title">\n                            <img src="https://owlracle.info/img/owl.webp" alt="owlracle logo">\n                            <psna>Recommended Gas Price</span>\n                        </div>\n                        <div id="body">\n                            <div class="spin"><i class="fas fa-spin fa-cog"></i></div>\n                            <span>Let me handle this </span>\n                        </div>\n                    </div>\n                    <div id="button-container"><button id="recharge-key" disabled>⚡Recharge⚡</button></div>`;const key=content.querySelector("#key"),apiKeyRegex=api.regex.apiKey,button=content.querySelector("button"),amount=content.querySelector("#amount"),refreshBalance=async(loop=!0)=>{const balanceDOM=content.querySelector("#values #balance");balanceDOM&&(balanceDOM.innerHTML=(await this.web3.getBalance()).slice(0,9),loop&&setTimeout(()=>refreshBalance(),5e3))};await refreshBalance();const inputAmount=async()=>{const value=parseFloat(amount.value),usd=content.querySelector("#values #usd");usd.innerHTML=`~$${(price.current.now*value).toFixed(2)}`,(isNaN(value)||value<=0)&&(usd.innerHTML="~$0.00"),value<=parseFloat(await this.web3.getBalance())&&value>0&&(button.removeAttribute("disabled"),amount.classList.remove("red"))};amount.addEventListener("keyup",inputAmount),content.querySelector("#token .token-name").addEventListener("click",()=>{amount.value=content.querySelector("#values #balance").innerHTML,inputAmount()});const gas={init:async function(){this.selected=2,await this.update()},getSelected:function(){return parseInt(1e9*this.list[this.selected])},update:async function(){content&&setTimeout(()=>this.update(),1e4),this.list=(await this.get()).speeds.filter((_,i)=>i<3).map(e=>e.gasPrice),content.querySelectorAll("#gasprice .card .value").forEach((e,i)=>e.innerHTML=`${this.list[i].toFixed(1)} GWei`)},get:async function(){return new Promise(resolve=>{const wait=()=>{window.gasPrice?resolve(window.gasPrice):setTimeout(()=>{wait()},250)};wait()})}};await gas.init();const gasPriceContainer=content.querySelector("#gasprice #body");gasPriceContainer.innerHTML=gas.list.map((e,i)=>{const speeds=["🛴 Slow","🚗 Standard","✈️ Fast"];return content.querySelector("#recharge-key").removeAttribute("disabled"),`<div class="card ${2==i?"selected":""}"><span>${speeds[i]}</span><span class="value">${e.toFixed(1)} GWei</span></div>`}).join("");const cards=gasPriceContainer.querySelectorAll(".card");cards.forEach((e,i)=>e.addEventListener("click",()=>{cards.forEach(e=>e.classList.remove("selected")),e.classList.add("selected"),gas.selected=i})),key.addEventListener("keyup",()=>{const value=key.value.trim().toLowerCase();value.match(apiKeyRegex)&&(button.removeAttribute("disabled"),key.classList.remove("red"))}),button.addEventListener("click",async()=>{if(!key.value.match(apiKeyRegex))return new Toast("🔑 Invalid API key",{timeOut:3e3,position:"center"}),button.setAttribute("disabled",!0),void key.classList.add("red");if(parseFloat(amount.value)>parseFloat(await this.web3.getBalance()))return new Toast("💸 Insufficient balance",{timeOut:3e3,position:"center"}),button.setAttribute("disabled",!0),void amount.classList.add("red");if(isNaN(parseFloat(amount.value))||parseFloat(amount.value)<=0)return new Toast("💰 Invalid token value",{timeOut:3e3,position:"center"}),button.setAttribute("disabled",!0),void amount.classList.add("red");button.setAttribute("disabled",!0),button.innerHTML='<i class="fas fa-spin fa-cog"></i>';const validKey=await(async()=>{const data=await api.getKey(key.value);return!data.error})();if(!validKey)return new Toast("🔑 API key not found",{timeOut:3e3,position:"center"}),key.classList.add("red"),void(button.innerHTML="⚡Recharge⚡");let toastConfirm=new Toast('<i class="fas fa-spin fa-cog"></i><span> Waiting for confirmation...</span>',{timeOut:0,position:"center"}),toastAccept,stopError=!1;await new Promise(resolve=>{const successFlow=async(hash,{cancel:cancel=!1}={})=>{if(toastAccept.fade(1e3),new Toast(`Transaction ${cancel?"Cancelled":"Confirmed"}. <a href="${network.get().explorer.href}/tx/${hash}" target="_blank" aria-label="view transaction" rel="noopener">View in explorer</a>.`,{timeOut:15e3,position:"center"}),cookies.delete("pending-tx-recharge"),!cancel){let toastUpdate=new Toast('<i class="fas fa-spin fa-cog"></i><span> Updating your API credit...</span>',{timeOut:0,position:"center"});const data=await this.updateCredit({apiKey:key.value,transactionHash:hash});if(toastUpdate.fade(1e3),200==data.status){let bonus="";return data.bonus&&(bonus=` (<span class="green">+$${parseFloat(data.bonus).toFixed(4)}</span> bonus)`),new Toast(`🦉 Your API credit was increased by <span class="green">$${parseFloat(data.amount.usd).toFixed(4)}</span>${bonus}. Thanks!`,{timeOut:1e4,position:"center"}),!0}return new Toast('🦉 Something want wrong while updating your credit. Please go to our <a href="https://t.me/owlracle" target="_blank" aria-label="telegram group" rel="noopener">Telegram group</a> and inform us about this issue.',{timeOut:1e4,position:"center"}),!1}return!0};this.web3.send({from:account,to:wallet.address,value:amount.value,gasPrice:gas.getSelected()}).on("error",error=>{stopError||(new Toast(`Transaction failed. Message: <i>${error.message}</i>`,{timeOut:1e4,position:"center"}),toastConfirm.fade(1e3),toastAccept&&toastAccept.fade(1e3),resolve(error))}).on("transactionHash",async hash=>{toastConfirm.fade(1e3),toastAccept=new Toast('<i class="fas fa-spin fa-cog"></i><span> Waiting for transaction...</span>',{timeOut:0,position:"center"}),cookies.set("pending-tx-recharge",{hash:hash,apikey:key.value},{expires:{hours:1},json:!0});const confirm=await this.web3.waitConfirmation(hash);confirm.error||"replaced"!=confirm.status&&"cancelled"!=confirm.status||(console.log(`Found ${confirm.status} tx: ${confirm.tx.hash}`),await successFlow(confirm.tx.hash,{cancel:"cancelled"==confirm.status}),stopError=!0,resolve(confirm.tx))}).on("receipt",async receipt=>{await successFlow(receipt.transactionHash),resolve(receipt)})}),refreshBalance(!1),button.removeAttribute("disabled"),button.innerHTML="⚡Recharge⚡"}),updatingUI=!1};(async()=>{await new Promise(resolve=>new DynamicScript("https://cdnjs.cloudflare.com/ajax/libs/web3/1.7.1/web3.min.js",()=>resolve(!0))),this.web3=(await import("./web3.min.js")).default,this.web3.init().then(()=>{this.web3.on("connect",checkWalletConnection),this.web3.on("networkChange",checkWalletConnection),this.web3.on("accountChange",checkWalletConnection),checkWalletConnection()})})()},logs:()=>{const container=this.content[id],buildTable=data=>{let txs='<div class="empty">No requests found. Try to adjust the time range of your search.</div>';if(data.length>0){const tds=data.map(e=>{const thisNetwork=network.getList()[e.network];return`<div class="row col-5">\n                                <div class="cell">${new Date(e.timestamp).toISOString().replace("T"," ").split(".")[0]}</div>\n                                <div class="cell">${thisNetwork.name}</div>\n                                <div class="cell">${e.endpoint}</div>\n                                <div class="cell">${e.ip}</div>\n                                <div class="cell" title="${e.origin}">${e.origin}</div>\n                            </div>`}).join("");txs=`<div class="row head col-5">\n                            <div class="cell">Time</div>\n                            <div class="cell">Network</div>\n                            <div class="cell">Endpoint</div>\n                            <div class="cell">IP</div>\n                            <div class="cell">Origin</div>\n                        </div>\n                        <div class="body">${tds}</div>`}return txs=`<div class="table">${txs}</div>`,txs},start=async e=>{const key=api.isLogged();if(e){const pos=e.id.split("-")[0],value=parseInt(new Date(e.value).getTime()/1e3);"from"!=pos&&this.fromTime?"to"!=pos&&this.toTime||(this.toTime=value):this.fromTime=value}const data=await api.getLogs(key,this.fromTime,this.toTime),table=buildTable(data);container.querySelector("#table-container").innerHTML=table};container.querySelectorAll(".time-range").forEach(e=>e.addEventListener("input",()=>start(e)))},logout:()=>{document.querySelector("#fog").click(),api.logout()}};bindFunctions[id]&&bindFunctions[id]()}},startHeaderApiSearch=()=>{api.login();const apiButton=document.querySelector("#search #api-info");apiButton.addEventListener("click",async()=>{if(!apiButton.classList.contains("loading")){apiButton.classList.add("loading");const data=await api.login();if(apiButton.classList.remove("loading"),!data)return void new Toast("😖 API key not found",{timeOut:5e3});api.showProfile("info")}}),document.querySelector("#search input").addEventListener("keyup",e=>{"Enter"==e.key&&document.querySelector("#search #api-info").click()}),document.querySelector("#search #drop").addEventListener("click",(async function(){const dropdown=document.createElement("div");dropdown.id="dropdown";const key=api.isLogged(),dropdownContent=['<div id="create-key" class="item">New API Key</div>'];key&&dropdownContent.push('<div id="info-key" class="item">View key info</div>','<div id="recharge-key" class="item">Recharge Key</div>','<div id="recharge-history" class="item">My recharges</div>','<div id="request-logs" class="item">Usage logs</div>','<div id="logout-key" class="item">Logout</div>'),dropdown.innerHTML=dropdownContent.join(""),dropdown.style.top=`${this.offsetTop+this.clientHeight}px`,dropdown.style.left=`${this.offsetLeft+this.clientWidth-145}px`,dropdown.querySelector("#create-key").addEventListener("click",()=>api.showProfile("create")),key&&(dropdown.querySelector("#info-key").addEventListener("click",()=>{api.showProfile("info")}),dropdown.querySelector("#recharge-key").addEventListener("click",async()=>{api.showProfile("recharge")}),dropdown.querySelector("#recharge-history").addEventListener("click",async()=>{api.showProfile("history")}),dropdown.querySelector("#request-logs").addEventListener("click",async()=>{api.showProfile("logs")}),dropdown.querySelector("#logout-key").addEventListener("click",()=>{api.logout()}));const fog=document.createElement("div");fog.id="fog",fog.classList.add("invisible"),document.body.appendChild(fog),fog.appendChild(dropdown),fog.addEventListener("click",()=>fog.remove())}))};class Tooltip{constructor(parent,text,{createEvent:createEvent="click",killEvent:killEvent="mouseleave",delay:delay=0,timeout:timeout=null}={}){return this.parent=parent,text||(text=parent.title,parent.removeAttribute("title")),this.text=text,this.parent.addEventListener("touchstart",()=>{this.touching=!0},{passive:!0}),this.parent.addEventListener(createEvent,e=>{this.pendingCreate=!0,setTimeout(()=>{this.pendingCreate&&!this.touching&&this.create(e),this.touching=!1},delay),timeout&&setTimeout(()=>this.kill(),timeout)}),"mouseleave"==killEvent&&this.parent.addEventListener(killEvent,()=>{this.pendingCreate=!1,this.kill()}),this}create(event){const tooltip=document.createElement("div");this.element=tooltip,tooltip.classList.add("tooltip"),tooltip.innerHTML=this.text,tooltip.style.top=`${event.y}px`,tooltip.style.left=`${event.x}px`,document.querySelectorAll(".tooltip").forEach(e=>e.remove()),this.parent.insertAdjacentElement("afterend",tooltip),tooltip.offsetLeft+tooltip.offsetWidth>window.outerWidth&&(tooltip.style.left=`${event.x-tooltip.offsetWidth}px`),fadeIn(tooltip,200)}kill(){this.element&&fadeOut(this.element,200)}setText(text){this.text=text}}class Modal{constructor(text,options={}){document.querySelector("#fog.modal")&&document.querySelector("#fog.modal").remove();const fog=document.createElement("div");fog.id="fog",fog.innerHTML=`<div class='modal'><div id="content">${text}</div></div>`,this.domObject=fog.querySelector(".modal"),options.id&&(this.domObject.id=options.id),options.large&&this.domObject.classList.add("large"),this.fogClose=!options.fog||(options.fog.close||!1),this.fogClose&&(fog.addEventListener("click",()=>fog.remove()),fog.querySelector("div").addEventListener("click",e=>e.stopPropagation())),options.fog&&options.fog.dark&&fog.classList.add("dark"),options.fog&&options.fog.invisible&&fog.classList.add("invisible"),options.buttonClose&&fog.querySelector(`#${options.buttonClose}`).addEventListener("click",()=>fog.remove()),document.body.appendChild(fog),fadeIn(fog,500),options.events&&options.events.forEach(event=>{this.addEvent(event)})}addEvent(event){let selector="",attr=event.tag;event.id?(selector="#",attr=event.id):event.class&&(selector=".",attr=event.class);const obj=this.domObject.querySelector(`${selector}${attr}`);return obj.addEventListener(event.event,event.callback),this}close(){this.domObject.parentNode.remove()}}class Toast{constructor(text,{timeOut:timeOut,position:position="right"}={}){let container=document.querySelector("#toast-container");return container||(container=document.createElement("div"),container.id="toast-container",document.body.append(container)),this.element=document.createElement("div"),this.element.classList.add("toast"),this.element.innerHTML=text,this.timeOut=timeOut,"center"==position&&container.classList.add("center"),container.prepend(this.element),this.timeOut>0&&this.fade(),this}fade(timeOut){timeOut||(timeOut=this.timeOut),setTimeout(()=>this.element.classList.add("fade"),timeOut-1e3),setTimeout(()=>this.element.remove(),timeOut),setTimeout(()=>{this.element.remove(),!document.querySelector("#toast-container .toast")&&document.querySelector("#toast-container")&&document.querySelector("#toast-container").remove()},timeOut)}}const infoMessageModal={show:function(message){if(message)return this.create(message);fadeIn(this.container)},create:function(message){return this.container=document.createElement("div"),this.container.innerHTML=`<div id="owlracle-info">\n            <div id="message">\n                <img src="https://owlracle.info/img/owl.webp" alt="owlracle logo">\n                <span>${message}</span>\n            </div>\n            <div id="close"><i class="fas fa-times-circle"></i></div>\n        </div>`,this.container.querySelector("#close").addEventListener("click",()=>{this.hide(),this.onClose&&this.onClose()}),document.body.appendChild(this.container),this.container},hide:function(){fadeOut(this.container)}},recaptcha={ready:!1,loading:!1,setKey:function(key){this.key=key},load:async function(){if(this.ready)return!0;if(this.loading||!this.key)return new Promise(resolve=>setTimeout(()=>resolve(this.load()),10));this.loading=!0;const script=document.createElement("script");return script.async=!0,script.src=`https://www.google.com/recaptcha/api.js?render=${this.key}`,document.head.appendChild(script),new Promise(resolve=>script.onload=()=>{this.ready=!0,resolve(!0)})},getToken:async function(){return await this.load(),new Promise(resolve=>grecaptcha.ready(()=>grecaptcha.execute(this.key,{action:"submit"}).then(token=>resolve(token))))}};export{DynamicScript,theme,cookies,wallet,price,api,Tooltip,network,Modal,recaptcha,fadeIn,infoMessageModal,startHeaderApiSearch,Toast};
//# sourceMappingURL=utils.min.js.map